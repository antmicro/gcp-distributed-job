name: test
on: [push]

jobs:
  generate-sha:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.generate-sha.outputs.matrix }}
      samples: ${{ steps.generate-samples.outputs.samples }}
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        ./scripts/prepare_environment.sh
        pip3 install west
    - name: Get zephyr
      run: west init zephyrproject
    - name: Generate matrix
      id: generate-sha
      run: |
        matrix=$(git -C zephyrproject/zephyr log -n 1 --format='"%h",' | tr '\n' ' ')
        # Test case - only one valid zephyr commit for now
        matrix='"62f19cc6b3",'
        matrix="[${matrix}]"
        echo "::set-output name=matrix::$matrix"
        echo "matrix: $matrix"
    - name: Generate samples
      id: generate-samples
      run: |
        samples="['hello_world', 'shell_module', 'philosophers', 'micropython', 'tensorflow_lite_micro']"
        echo "::set-output name=samples::$samples"
        echo "samples: $samples"
    - name: Tar zephyr
      run: tar cvf zephyrproject.tar zephyrproject
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: zephyr
        path: zephyrproject.tar
  build:
    runs-on: ubuntu-20.04
    needs: [generate-sha]
    strategy:
      matrix:
        SHA: ${{ fromJson(needs.generate-sha.outputs.matrix) }}
        sample: ${{ fromJson(needs.generate-sha.outputs.samples) }}
      fail-fast:
        false
    env:
      ZEPHYR_SDK_VERSION: 0.14.2
      ZEPHYR_COMMIT: ${{ matrix.SHA }}
      SAMPLE_NAME: ${{ matrix.sample }}
      MICROPYTHON_VERSION: 97a7cc243b028833bdcb8ce0bc19b2bce7545851
    steps:
    - uses: actions/checkout@v2
    - name: Download zephyr
      uses: actions/download-artifact@v2
      with:
        name: zephyr
        path: zephyr-artifact
    - name: Prepare environment
      run: ./scripts/prepare_environment.sh
    - name: Prepare zephyr
      run: ./scripts/prepare_zephyr.sh
    - name: Prepare micropython
      run: ./scripts/prepare_micropython.sh
    - name: Build boards
      run: ./scripts/build.py
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.SHA }}
        path: artifacts/
  simulate:
    runs-on: ubuntu-20.04
    needs: [generate-sha, build]
    strategy:
      fail-fast: false
      matrix:
        SHA: ${{ fromJson(needs.generate-sha.outputs.matrix) }}
        sample: ${{ fromJson(needs.generate-sha.outputs.samples) }}
    env:
      RENODE_VERSION: 1.13.1+20220731git8eca7310
      SAMPLE_NAME: ${{ matrix.sample }}
    steps:
    - uses: actions/checkout@v2
    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.SHA }}
        path: artifacts/
    - name: Prepare environment
      run: ./scripts/prepare_environment.sh
    - name: Prepare Renode
      run: ./scripts/download_renode.sh
    - name: Simulate
      run: ./scripts/simulate.py
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.SHA }}
        path: artifacts/
  results:
    runs-on: ubuntu-20.04
    needs: [simulate]
    env:
      GHA_SA: "gh-sa-gcp-distributed-job-buck"
    steps:
    - name: Delete zephyr artifact
      uses: geekyeggo/delete-artifact@v1
      with:
        name: zephyr
    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        path: results/
    - name: Install dependencies
      run: |
        sudo apt-get update -qq
        sudo apt install -y curl gnupg
    - run: ls -la results
    - name: Find artifacts that are no longer needed
      id: get-artifacts-to-delete
      run: |
        artifacts=$(find ./results -type d -name '*.txt' -exec basename {} \;)
        echo ${{ fromJson(needs.generate-sha.outputs.samples) }}
        echo $artifacts
        artifacts="${artifacts//'%'/'%25'}"
        artifacts="${artifacts//$'\n'/'%0A'}"
        artifacts="${artifacts//$'\r'/'%0D'}"
        echo ::set-output name=artifacts::$artifacts
        echo $artifacts
    - name: Delete Old Artifacts
      uses: geekyeggo/delete-artifact@v1
      with:
        name: ${{ steps.get-artifacts-to-delete.outputs.matrix }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: result
        path: results
