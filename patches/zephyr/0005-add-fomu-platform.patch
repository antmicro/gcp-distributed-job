commit 917238cbe12464c4cf5f941ec8005f6df4c60852
Author: Karol Gugala <kgugala@antmicro.com>
Date:   Mon Jun 6 17:43:32 2022 -0700

    Add FOMU platform

diff --git a/boards/riscv/fomu/Kconfig.board b/boards/riscv/fomu/Kconfig.board
new file mode 100644
index 0000000000..3b34c7b697
--- /dev/null
+++ b/boards/riscv/fomu/Kconfig.board
@@ -0,0 +1,6 @@
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+# SPDX-License-Identifier: Apache-2.0
+
+config BOARD_FOMU
+	bool "Kosagi FOMU board with LiteX/VexRiscv CPU"
+	depends on SOC_RISCV32_FOMU
diff --git a/boards/riscv/fomu/Kconfig.defconfig b/boards/riscv/fomu/Kconfig.defconfig
new file mode 100644
index 0000000000..23cfd861c9
--- /dev/null
+++ b/boards/riscv/fomu/Kconfig.defconfig
@@ -0,0 +1,6 @@
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+# SPDX-License-Identifier: Apache-2.0
+
+config BOARD
+	default "fomu"
+	depends on BOARD_FOMU
diff --git a/boards/riscv/fomu/fomu.dts b/boards/riscv/fomu/fomu.dts
new file mode 100644
index 0000000000..32fc43d98f
--- /dev/null
+++ b/boards/riscv/fomu/fomu.dts
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2022 Antmicro <www.antmicro.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+/dts-v1/;
+#include <riscv32-litex-vexriscv.dtsi>
+
+/{
+	model = "Fomu ICE40UP5K with LiteX Vexriscv";
+	compatible = "kosagi,fomu";
+
+	chosen {
+		zephyr,console = &uart0;
+		zephyr,shell-uart = &uart0;
+		zephyr,sram = &ram0;
+		zephyr,flash = &flash0;
+	};
+
+	cpus {
+		cpu@0 {
+			clock-frequency = <12000000>;
+			riscv,isa = "rv32im";
+		};
+	};
+
+	ram0: memory@10000000 {
+		device_type = "memory";
+		compatible = "memory";
+		reg = <0x10002000 0x0001f000>;
+	};
+
+
+	fake_spi: spi@dead {
+		reg = <0xdead 0xdead 0x20040000 0x00100000>;
+		reg-names = "dummy", "mem";
+		label = "fake-spi";
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		flash0: flash@20040000 {
+			compatible = "jedec,spi-nor";
+			label = "memory mapped spiflash";
+			reg = <0x20040000>;
+			size = <0x00100000>;
+			status = "okay";
+		};
+	};
+};
+
+&uart0 {
+	status = "okay";
+	current-speed = <115200>;
+	interrupts = <1 0>;
+};
+
+&timer0 {
+	reg = <0xe0002800 0x10
+		0xe0002810 0x10
+		0xe0002820 0x4
+		0xe0002824 0x4
+		0xe0002828 0x10
+		0xe0002838 0x4
+		0xe000283c 0x4
+		0xe0002840 0x4
+		0xe0002844 0x4
+		0xe0002848 0x20>;
+	reg-names = "load",
+		"reload",
+		"en",
+		"update_value",
+		"value",
+		"ev_status",
+		"ev_pending",
+		"ev_enable",
+		"uptime_latch",
+		"uptime_cycles";
+	interrupts = <2 0>; // v1: <0 0>, v2: <2 0>
+	status = "okay";
+};
diff --git a/boards/riscv/fomu/fomu_defconfig b/boards/riscv/fomu/fomu_defconfig
new file mode 100644
index 0000000000..f37da7b144
--- /dev/null
+++ b/boards/riscv/fomu/fomu_defconfig
@@ -0,0 +1,22 @@
+#
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+#
+# SPDX-License-Identifier: Apache-2.0
+#
+
+CONFIG_BOARD_FOMU=y
+CONFIG_SOC_RISCV32_FOMU=y
+
+CONFIG_VEXRISCV_LITEX_IRQ=y
+CONFIG_LITEX_TIMER=y
+
+CONFIG_SERIAL=y
+CONFIG_UART_LITEUART=y
+CONFIG_CONSOLE=y
+CONFIG_UART_CONSOLE=y
+
+CONFIG_PRINTK=y
+CONFIG_EARLY_CONSOLE=n
+CONFIG_BOOT_BANNER=n
+
+CONFIG_XIP=y
diff --git a/drivers/timer/Kconfig.litex b/drivers/timer/Kconfig.litex
index 80e2574928..b03d3e1ea6 100644
--- a/drivers/timer/Kconfig.litex
+++ b/drivers/timer/Kconfig.litex
@@ -6,7 +6,7 @@
 config LITEX_TIMER
 	bool "LiteX Timer"
 	default y
-	depends on DT_HAS_LITEX_TIMER0_ENABLED
+	depends on SOC_RISCV32_LITEX_VEXRISCV || SOC_RISCV32_FOMU
 	select TIMER_HAS_64BIT_CYCLE_COUNTER
 	help
 	  This module implements a kernel device driver for LiteX Timer.
diff --git a/soc/riscv/fomu/CMakeLists.txt b/soc/riscv/fomu/CMakeLists.txt
new file mode 100644
index 0000000000..34add02a42
--- /dev/null
+++ b/soc/riscv/fomu/CMakeLists.txt
@@ -0,0 +1,10 @@
+#
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+#
+# SPDX-License-Identifier: Apache-2.0
+#
+
+zephyr_sources(
+    ../riscv-privilege/common/soc_irq.S
+    vector.S
+)
diff --git a/soc/riscv/fomu/Kconfig.defconfig b/soc/riscv/fomu/Kconfig.defconfig
new file mode 100644
index 0000000000..9e632568f5
--- /dev/null
+++ b/soc/riscv/fomu/Kconfig.defconfig
@@ -0,0 +1,27 @@
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+# SPDX-License-Identifier: Apache-2.0
+
+if SOC_RISCV32_FOMU
+
+config SOC
+	default "fomu"
+
+config SYS_CLOCK_HW_CYCLES_PER_SEC
+	default 12000000
+
+config RISCV_HAS_CPU_IDLE
+	bool
+
+config RISCV_HAS_PLIC
+	bool
+
+config NUM_IRQS
+	default 12
+
+config RISCV_ISA_EXT_A
+	default n
+
+config LITEX_CSR_DATA_WIDTH
+	default 8
+
+endif # SOC_RISCV32_FOMU
diff --git a/soc/riscv/fomu/Kconfig.soc b/soc/riscv/fomu/Kconfig.soc
new file mode 100644
index 0000000000..2c09523050
--- /dev/null
+++ b/soc/riscv/fomu/Kconfig.soc
@@ -0,0 +1,11 @@
+# Copyright (c) 2022 Antmicro <www.antmicro.com>
+# SPDX-License-Identifier: Apache-2.0
+
+config SOC_RISCV32_FOMU
+	bool "Fomu system implementation"
+	select RISCV
+	select ATOMIC_OPERATIONS_C
+	select INCLUDE_RESET_VECTOR
+	select RISCV_ISA_RV32I
+	select RISCV_ISA_EXT_A
+	select RISCV_ISA_EXT_ZICSR
diff --git a/soc/riscv/fomu/linker.ld b/soc/riscv/fomu/linker.ld
new file mode 100644
index 0000000000..d0195a49a9
--- /dev/null
+++ b/soc/riscv/fomu/linker.ld
@@ -0,0 +1,7 @@
+/*
+ * Copyright (c) 2022 Antmicro <www.antmicro.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <zephyr/arch/riscv/common/linker.ld>
diff --git a/soc/riscv/fomu/soc.h b/soc/riscv/fomu/soc.h
new file mode 100644
index 0000000000..5285b32635
--- /dev/null
+++ b/soc/riscv/fomu/soc.h
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) 2022 Antmicro <www.antmicro.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#ifndef __RISCV32_FOMU_SOC_H_
+#define __RISCV32_FOMU_SOC_H_
+
+#include "../litex-vexriscv/soc.h"
+
+#endif /* __RISCV32_FOMU_SOC_H_ */
diff --git a/soc/riscv/fomu/vector.S b/soc/riscv/fomu/vector.S
new file mode 100644
index 0000000000..5bef05d2d4
--- /dev/null
+++ b/soc/riscv/fomu/vector.S
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2017 Jean-Paul Etienne <fractalclone@gmail.com>
+ * Contributors: 2018-2022 Antmicro <www.antmicro.com>
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <zephyr/toolchain.h>
+
+/* exports */
+GTEXT(__start)
+
+/* imports */
+GTEXT(__initialize)
+GTEXT(_isr_wrapper)
+
+SECTION_FUNC(vectors, __start)
+#if defined(CONFIG_RISCV_GP)
+	/* Initialize global pointer */
+	.option push
+	.option norelax
+	la gp, __global_pointer$
+	.option pop
+#endif
+
+	.option norvc;
+
+	/*
+	 * Set mtvec (Machine Trap-Vector Base-Address Register)
+	 * to _isr_wrapper.
+	 */
+	la t0, _isr_wrapper
+	csrw mtvec, t0
+
+	/* Jump to __reset */
+	tail __reset
+#ifndef CONFIG_XIP
+    .word 0x17ab0f23
+    .word 0x10002000
+#endif
